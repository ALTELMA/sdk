<?php
/**
 * PreviousConsentSession
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ORY Hydra
 *
 * Welcome to the ORY Hydra HTTP API documentation. You will find documentation for all HTTP APIs here.
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PreviousConsentSession Class Doc Comment
 *
 * @category Class
 * @description The response used to return used consent requests same as HandledLoginRequest, just with consent_request exposed as json
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PreviousConsentSession implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PreviousConsentSession';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'consent_request' => '\OpenAPI\Client\Model\ConsentRequest',
        'grant_access_token_audience' => 'string[]',
        'grant_scope' => 'string[]',
        'handled_at' => '\DateTime',
        'remember' => 'bool',
        'remember_for' => 'int',
        'session' => '\OpenAPI\Client\Model\ConsentRequestSession'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'consent_request' => null,
        'grant_access_token_audience' => null,
        'grant_scope' => null,
        'handled_at' => 'date-time',
        'remember' => null,
        'remember_for' => 'int64',
        'session' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'consent_request' => 'consent_request',
        'grant_access_token_audience' => 'grant_access_token_audience',
        'grant_scope' => 'grant_scope',
        'handled_at' => 'handled_at',
        'remember' => 'remember',
        'remember_for' => 'remember_for',
        'session' => 'session'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'consent_request' => 'setConsentRequest',
        'grant_access_token_audience' => 'setGrantAccessTokenAudience',
        'grant_scope' => 'setGrantScope',
        'handled_at' => 'setHandledAt',
        'remember' => 'setRemember',
        'remember_for' => 'setRememberFor',
        'session' => 'setSession'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'consent_request' => 'getConsentRequest',
        'grant_access_token_audience' => 'getGrantAccessTokenAudience',
        'grant_scope' => 'getGrantScope',
        'handled_at' => 'getHandledAt',
        'remember' => 'getRemember',
        'remember_for' => 'getRememberFor',
        'session' => 'getSession'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['consent_request'] = $data['consent_request'] ?? null;
        $this->container['grant_access_token_audience'] = $data['grant_access_token_audience'] ?? null;
        $this->container['grant_scope'] = $data['grant_scope'] ?? null;
        $this->container['handled_at'] = $data['handled_at'] ?? null;
        $this->container['remember'] = $data['remember'] ?? null;
        $this->container['remember_for'] = $data['remember_for'] ?? null;
        $this->container['session'] = $data['session'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets consent_request
     *
     * @return \OpenAPI\Client\Model\ConsentRequest|null
     */
    public function getConsentRequest()
    {
        return $this->container['consent_request'];
    }

    /**
     * Sets consent_request
     *
     * @param \OpenAPI\Client\Model\ConsentRequest|null $consent_request consent_request
     *
     * @return self
     */
    public function setConsentRequest($consent_request)
    {
        $this->container['consent_request'] = $consent_request;

        return $this;
    }

    /**
     * Gets grant_access_token_audience
     *
     * @return string[]|null
     */
    public function getGrantAccessTokenAudience()
    {
        return $this->container['grant_access_token_audience'];
    }

    /**
     * Sets grant_access_token_audience
     *
     * @param string[]|null $grant_access_token_audience grant_access_token_audience
     *
     * @return self
     */
    public function setGrantAccessTokenAudience($grant_access_token_audience)
    {
        $this->container['grant_access_token_audience'] = $grant_access_token_audience;

        return $this;
    }

    /**
     * Gets grant_scope
     *
     * @return string[]|null
     */
    public function getGrantScope()
    {
        return $this->container['grant_scope'];
    }

    /**
     * Sets grant_scope
     *
     * @param string[]|null $grant_scope grant_scope
     *
     * @return self
     */
    public function setGrantScope($grant_scope)
    {
        $this->container['grant_scope'] = $grant_scope;

        return $this;
    }

    /**
     * Gets handled_at
     *
     * @return \DateTime|null
     */
    public function getHandledAt()
    {
        return $this->container['handled_at'];
    }

    /**
     * Sets handled_at
     *
     * @param \DateTime|null $handled_at handled_at
     *
     * @return self
     */
    public function setHandledAt($handled_at)
    {
        $this->container['handled_at'] = $handled_at;

        return $this;
    }

    /**
     * Gets remember
     *
     * @return bool|null
     */
    public function getRemember()
    {
        return $this->container['remember'];
    }

    /**
     * Sets remember
     *
     * @param bool|null $remember Remember, if set to true, tells ORY Hydra to remember this consent authorization and reuse it if the same client asks the same user for the same, or a subset of, scope.
     *
     * @return self
     */
    public function setRemember($remember)
    {
        $this->container['remember'] = $remember;

        return $this;
    }

    /**
     * Gets remember_for
     *
     * @return int|null
     */
    public function getRememberFor()
    {
        return $this->container['remember_for'];
    }

    /**
     * Sets remember_for
     *
     * @param int|null $remember_for RememberFor sets how long the consent authorization should be remembered for in seconds. If set to `0`, the authorization will be remembered indefinitely.
     *
     * @return self
     */
    public function setRememberFor($remember_for)
    {
        $this->container['remember_for'] = $remember_for;

        return $this;
    }

    /**
     * Gets session
     *
     * @return \OpenAPI\Client\Model\ConsentRequestSession|null
     */
    public function getSession()
    {
        return $this->container['session'];
    }

    /**
     * Sets session
     *
     * @param \OpenAPI\Client\Model\ConsentRequestSession|null $session session
     *
     * @return self
     */
    public function setSession($session)
    {
        $this->container['session'] = $session;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


