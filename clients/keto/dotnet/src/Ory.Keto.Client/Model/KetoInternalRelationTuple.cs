/*
 * ORY Keto
 *
 * Ory Keto is a cloud native access control server providing best-practice patterns (RBAC, ABAC, ACL, AWS IAM Policies, Kubernetes Roles, ...) via REST APIs.
 *
 * The version of the OpenAPI document: v0.6.0-alpha.1
 * Contact: hi@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ory.Keto.Client.Client.OpenAPIDateConverter;

namespace Ory.Keto.Client.Model
{
    /// <summary>
    /// KetoInternalRelationTuple
    /// </summary>
    [DataContract(Name = "InternalRelationTuple")]
    public partial class KetoInternalRelationTuple : IEquatable<KetoInternalRelationTuple>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KetoInternalRelationTuple" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KetoInternalRelationTuple() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KetoInternalRelationTuple" /> class.
        /// </summary>
        /// <param name="_namespace">Namespace of the Relation Tuple  in: query (required).</param>
        /// <param name="_object">Object of the Relation Tuple  in: query (required).</param>
        /// <param name="relation">Relation of the Relation Tuple  in: query (required).</param>
        /// <param name="subject">subject (required).</param>
        public KetoInternalRelationTuple(string _namespace = default(string), string _object = default(string), string relation = default(string), string subject = default(string))
        {
            // to ensure "_namespace" is required (not null)
            this.Namespace = _namespace ?? throw new ArgumentNullException("_namespace is a required property for KetoInternalRelationTuple and cannot be null");
            // to ensure "_object" is required (not null)
            this.Object = _object ?? throw new ArgumentNullException("_object is a required property for KetoInternalRelationTuple and cannot be null");
            // to ensure "relation" is required (not null)
            this.Relation = relation ?? throw new ArgumentNullException("relation is a required property for KetoInternalRelationTuple and cannot be null");
            // to ensure "subject" is required (not null)
            this.Subject = subject ?? throw new ArgumentNullException("subject is a required property for KetoInternalRelationTuple and cannot be null");
        }

        /// <summary>
        /// Namespace of the Relation Tuple  in: query
        /// </summary>
        /// <value>Namespace of the Relation Tuple  in: query</value>
        [DataMember(Name = "namespace", IsRequired = true, EmitDefaultValue = false)]
        public string Namespace { get; set; }

        /// <summary>
        /// Object of the Relation Tuple  in: query
        /// </summary>
        /// <value>Object of the Relation Tuple  in: query</value>
        [DataMember(Name = "object", IsRequired = true, EmitDefaultValue = false)]
        public string Object { get; set; }

        /// <summary>
        /// Relation of the Relation Tuple  in: query
        /// </summary>
        /// <value>Relation of the Relation Tuple  in: query</value>
        [DataMember(Name = "relation", IsRequired = true, EmitDefaultValue = false)]
        public string Relation { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name = "subject", IsRequired = true, EmitDefaultValue = false)]
        public string Subject { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KetoInternalRelationTuple {\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  Relation: ").Append(Relation).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KetoInternalRelationTuple);
        }

        /// <summary>
        /// Returns true if KetoInternalRelationTuple instances are equal
        /// </summary>
        /// <param name="input">Instance of KetoInternalRelationTuple to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KetoInternalRelationTuple input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Namespace == input.Namespace ||
                    (this.Namespace != null &&
                    this.Namespace.Equals(input.Namespace))
                ) && 
                (
                    this.Object == input.Object ||
                    (this.Object != null &&
                    this.Object.Equals(input.Object))
                ) && 
                (
                    this.Relation == input.Relation ||
                    (this.Relation != null &&
                    this.Relation.Equals(input.Relation))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Namespace != null)
                    hashCode = hashCode * 59 + this.Namespace.GetHashCode();
                if (this.Object != null)
                    hashCode = hashCode * 59 + this.Object.GetHashCode();
                if (this.Relation != null)
                    hashCode = hashCode * 59 + this.Relation.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
